import networkx as nx

def main():
    # Datos de ciudades
    ciudades = [
        "Tulcán", "Ibarra", "Quito", "Latacunga", "Ambato", "Guaranda", "Riobamba",
        "Azogues", "Cuenca", "Esmeraldas", "Portoviejo", "Manta",
        "S. Domingo", "Guayaquil", "Salinas", "Machala"
    ]

    # Matrices: distancia (km) y dificultad (1-3)
    distancia = {
        ("Tulcán", "Ibarra"): 126.3,
        ("Ibarra", "Quito"): 113.3,
        ("Quito", "Latacunga"): 108.1,
        ("Latacunga", "Ambato"): 42.5,
        ("Ambato", "Guaranda"): 99.9,
        ("Guaranda", "Riobamba"): 59.9,
        ("Riobamba", "Ambato"): 62.2,
        ("Riobamba", "Azogues"): 242.1,
        ("Azogues", "Cuenca"): 31.6,
        ("Ibarra", "Esmeraldas"): 296,
        ("Quito", "Esmeraldas"): 255,
        ("Esmeraldas", "Manta"): 357.7,
        ("Quito", "S. Domingo"): 152.9,
        ("S. Domingo", "Manta"): 244.3,
        ("Guaranda", "Guayaquil"): 172.8,
        ("Riobamba", "Guayaquil"): 285,
        ("Guayaquil", "Cuenca"): 196,
        ("Manta", "Salinas"): 324.5,
        ("Guayaquil", "Salinas"): 129.4,
        ("Cuenca", "Machala"): 230.9,
        ("Guayaquil", "Machala"): 181.8
    }

    dificultad = {
        ("Tulcán", "Ibarra"): 2,
        ("Ibarra", "Quito"): 3,
        ("Quito", "Latacunga"): 3,
        ("Latacunga", "Ambato"): 3,
        ("Ambato", "Guaranda"): 2,
        ("Guaranda", "Riobamba"): 2,
        ("Riobamba", "Ambato"): 3,
        ("Riobamba", "Azogues"): 2,
        ("Azogues", "Cuenca"): 3,
        ("Ibarra", "Esmeraldas"): 1,
        ("Quito", "Esmeraldas"): 2,
        ("Esmeraldas", "Manta"): 2,
        ("Quito", "S. Domingo"): 1,
        ("S. Domingo", "Manta"): 2,
        ("Guaranda", "Guayaquil"): 1,
        ("Riobamba", "Guayaquil"): 1,
        ("Guayaquil", "Cuenca"): 1,
        ("Manta", "Salinas"): 3,
        ("Guayaquil", "Salinas"): 1,
        ("Cuenca", "Machala"): 1,
        ("Guayaquil", "Machala"): 3
    }

    # Velocidades según dificultad (km/h)
    velocidad = {1: 30, 2: 60, 3: 80}  # Corregido: valores más realistas (km/h)

    def calcular_tiempo(dist, dif):
        """Calcula el tiempo de viaje en horas.
        Fórmula: tiempo = (distancia + 25) / (2 * velocidad)
        """
        v = velocidad[dif]
        return (dist + 25) / (2 * v)

    # Crear grafo
    G = nx.Graph()
    
    # Verificar que todas las conexiones en distancia tengan su dificultad definida
    for conexion in distancia:
        if conexion not in dificultad:
            raise ValueError(f"Falta definir dificultad para la conexión {conexion}")
    
    # Añadir aristas al grafo
    for (ciudad1, ciudad2), dist in distancia.items():
        dif = dificultad[(ciudad1, ciudad2)]
        tiempo = calcular_tiempo(dist, dif)
        G.add_edge(ciudad1, ciudad2, weight=tiempo)

    # Verificar si el grafo es conexo (todas las ciudades están conectadas)
    if not nx.is_connected(G):
        print("Advertencia: El grafo no es conexo. Algunas ciudades no están conectadas.")
        # Encontrar componentes conexas
        componentes = list(nx.connected_components(G))
        print(f"Componentes conexas encontradas: {len(componentes)}")
        for i, comp in enumerate(componentes, 1):
            print(f"Componente {i}: {', '.join(comp)}")

    # Calcular árbol de expansión mínima
    mst = nx.minimum_spanning_tree(G)
    
    # Mostrar las conexiones del árbol mínimo
    print("\nConexiones en el árbol de expansión mínima:")
    for ciudad1, ciudad2, datos in mst.edges(data=True):
        print(f"{ciudad1} -- {ciudad2}: {datos['weight']:.2f} horas")
    
    tiempo_total = sum(d['weight'] for _, _, d in mst.edges(data=True))
    print(f"\nTiempo total mínimo: {tiempo_total:.2f} horas")

if _name_ == "_main_":
    main()
